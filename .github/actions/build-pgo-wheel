# Inspired from: https://github.com/pydantic/pydantic-core/blob/9975030e1f0b8b684c2e113e38c07547b24d353e/.github/actions/build-pgo-wheel/action.yml
name: Build PGO wheel
description: Builds a PGO-optimized wheel
inputs:
  interpreter:
    description: 'Interpreter to build the wheel for'
    required: true
  rust-toolchain:
    description: 'Rust toolchain to use'
    required: true
outputs:
  wheel:
    description: 'Path to the built wheel'
    value: ${{ steps.pgo_wheel.outputs.path }}
runs:
  using: "composite"
  steps:
    - name: Create profiling directory
      shell: bash
      # making this ahead of the compile ensures that the local user can write to this
      # directory; the maturin action (on linux) runs in docker so would create as root
      run: mkdir -p ${{ github.workspace }}/profdata

    - name: Build initial wheel
      run: |
        uv sync --group tests --python='${{ steps.setup-python.outputs.python-path }}'
        rm -rf differt-core/python/differt_core/*.so
        uv pip install -r pyproject.toml --group tests \
        --python='${{ steps.setup-python.outputs.python-path }}' \
        --config-settings=build-args='--profile profiling' --reinstall-package differt_core
      env:
        RUSTFLAGS: -Cprofile-generate=${{ github.workspace }}/profdata

    - name: Detect Rust host
      run: echo RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2) >> "$GITHUB_ENV"
      shell: bash

    - name: Generate profile data
      run: pytest --dist=no -n0 --benchmark-enable --benchmark-only --jaxtyping-packages="" differt/tests/benchmarks

    - name: Merge PGO data
      run: rustup run stable bash -c '$RUSTUP_HOME/toolchains/$RUSTUP_TOOLCHAIN/lib/rustlib/${{ env.RUST_HOST }}/bin/llvm-profdata merge -o ${{ github.workspace }}/merged.profdata ${{ github.workspace }}/profdata'

    - name: Re-install dependencies
      run: |
        rm -rf differt-core/python/differt_core/*.so
        uv pip install -r pyproject.toml --group tests \
        --python='${{ steps.setup-python.outputs.python-path }}' \
        --config-settings=build-args='--profile profiling' --reinstall-package differt_core
      env:
        RUSTFLAGS: -Cprofile-use=${{ github.workspace }}/merged.profdata

    - name: build initial wheel
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out pgo-wheel
          --interpreter ${{ inputs.interpreter }}
        rust-toolchain: ${{ inputs.rust-toolchain }}
        docker-options: -e CI
      env:
        RUSTFLAGS: '-Cprofile-generate=${{ github.workspace }}/profdata'

    - name: detect rust host
      run: echo RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2) >> "$GITHUB_ENV"
      shell: bash

    - name: generate pgo data
      run: |
        uv sync --group testing
        uv pip install pydantic-core --no-index --no-deps --find-links pgo-wheel --force-reinstall
        uv run pytest tests/benchmarks
        RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2)
        rustup run ${{ inputs.rust-toolchain }} bash -c 'echo LLVM_PROFDATA=$RUSTUP_HOME/toolchains/$RUSTUP_TOOLCHAIN/lib/rustlib/$RUST_HOST/bin/llvm-profdata >> "$GITHUB_ENV"'
      shell: bash

    - name: merge pgo data
      run: ${{ env.LLVM_PROFDATA }} merge -o ${{ github.workspace }}/merged.profdata ${{ github.workspace }}/profdata
      shell: pwsh  # because it handles paths on windows better, and works well enough on unix for this step

    - name: build pgo-optimized wheel
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out dist
          --interpreter ${{ inputs.interpreter }}
        rust-toolchain: ${{inputs.rust-toolchain}}
        docker-options: -e CI
      env:
        RUSTFLAGS: '-Cprofile-use=${{ github.workspace }}/merged.profdata'

    - name: Find and return path to PGO wheel
      id: pgo_wheel
      run: echo "path=$(ls dist/*.whl)" | tee -a "$GITHUB_OUTPUT"
      shell: bash