# Test code base and upload coverage
name: Test code

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

env:
  QT_QPA_PLATFORM: offscreen
  DISPLAY: :99

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        pyversion: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install freeglut3-dev xvfb
        sudo apt-get install x11-utils
        nohup Xvfb $DISPLAY -screen 0 1400x900x24 -dpi 96 +extension RANDR +render &

    - name: Install Mesa (OpenGL on Windows)
      if: matrix.os == 'windows-latest'
      uses: ssciwr/setup-mesa-dist-win@v2

    - name: Install PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ matrix.pyversion }}
        cache: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        pdm install -G test,github-action

    - name: Run Pytest
      if: matrix.os != 'ubuntu-latest' || matrix.pyversion != '3.12'
      run: |
        pdm run pytest -n auto

    - name: Run pytest and coverage
      if: matrix.os == 'ubuntu-latest' && matrix.pyversion == '3.12'
      run: pdm run pytest --cov-report xml --cov=differt tests/

    - name: Upload to codecov.io
      if: matrix.os == 'ubuntu-latest' && matrix.pyversion == '3.12'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
  cargo-test:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        pyversion: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.pyversion }}

    - name: Install NumPy
      run: pip install numpy

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run Cargo test
      run: |
        cargo test
  python-benchmark:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: '3.11'
        cache: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        pdm install -G test,github-action

    - name: Run Benchmarks on changes
      run: pdm run pytest --benchmark-only --benchmark-save=changes

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.sha }}
        clean: false

    - name: Run Benchmarks before changes
      run: pdm run pytest --benchmark-only --benchmark-save=before

    - name: Compare benchmarks
      run: |
        echo 'results<<EOF' >> $GITHUB_OUTPUT
        pdm run pytest-benchmark compare before changes >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
      id: compare

    - name: Comment PR with benchmarks
      uses: thollander/actions-comment-pull-request@v2
      continue-on-error: true
      with:
        message: |
          Python benchmark results:
          ```
          ${{ steps.compare.outputs.results }}
          ```
        comment_tag: python-benchmarks

      id: comment

    - name: If PR comment failed, write to PR summary
      if: steps.comment.outcome != 'success'
      run: |
        echo '### Python benchmark results' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.compare.outputs.results }}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
  rust-benchmark:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install NumPy
      run: pip install numpy

    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-benchcmp
      run: |
        cargo install cargo-benchcmp

    - name: Run Benchmarks on changes
      run: cargo bench > changes

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.sha }}
        clean: false

    - name: Run Benchmarks before changes
      run: cargo bench > before

    - name: Compare benchmarks
      run: |
        echo 'results<<EOF' >> $GITHUB_OUTPUT
        cargo benchcmp before changes >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
      id: compare

    - name: Comment PR with benchmarks
      uses: thollander/actions-comment-pull-request@v2
      continue-on-error: true
      with:
        message: |
          Rust benchmark results:
          ```
          ${{ steps.compare.outputs.results }}
          ```
        comment_tag: rust-benchmarks

      id: comment

    - name: If PR comment failed, write to PR summary
      if: steps.comment.outcome != 'success'
      run: |
        echo '### Rust benchmark results' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.compare.outputs.results }}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
